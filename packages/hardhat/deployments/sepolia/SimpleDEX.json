{
  "address": "0xa197690D2B54a41BCAF62B29cCB489f901d64895",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityTokenA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityTokenB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac63e674e48115cfe23959772fc3aed91196c64b36740881ecc05bbe63524a65",
  "receipt": {
    "to": null,
    "from": "0xAad653d909Db3BCfED20fC56FDdd960389fe5245",
    "contractAddress": "0xa197690D2B54a41BCAF62B29cCB489f901d64895",
    "transactionIndex": 91,
    "gasUsed": "835226",
    "logsBloom": "0x
    "blockHash": "0xdcc03b8c6eaee3b2fe41909e943b576858d1cbcfc642032a6f1a56bb32da0cc6",
    "transactionHash": "0xac63e674e48115cfe23959772fc3aed91196c64b36740881ecc05bbe63524a65",
    "logs": [],
    "blockNumber": 7287677,
    "cumulativeGasUsed": "12666604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x924D9d522A8725392ABC67Bf3291a66F0F19ae96",
    "0xF76DE9669c32433b64AacF8aF674e26a79CB6973"
  ],
  "numDeployments": 1,
  "solcInputHash": "56762f9dd57f30a705f85d6bdd688756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokenA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokenB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marco Godoy (Eth Kipu comisi\\u00f3n 3)\",\"details\":\"This contract allows users to: - Add liquidity to the pool - Remove liquidity from the pool - Swap between TokenA and TokenB - Retrieve prices and reserves\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of TokenA to deposit.\",\"amountB\":\"The amount of TokenB to deposit.\"}},\"constructor\":{\"params\":{\"_tokenA\":\"Address of TokenA.\",\"_tokenB\":\"Address of TokenB.\"}},\"getPriceA()\":{\"returns\":{\"_0\":\"The price of TokenA.\"}},\"getPriceB()\":{\"returns\":{\"_0\":\"price of TokenB.\"}},\"getReserves()\":{\"returns\":{\"reserveA\":\"The amount of TokenA in the pool.\",\"reserveB\":\"The amount of TokenB in the pool.\"}},\"removeLiquidity(uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of TokenA to withdraw.\",\"amountB\":\"The amount of TokenB to withdraw.\"}},\"swapAforB(uint256)\":{\"params\":{\"amountAIn\":\"The amount of TokenA to exchange.\"}},\"swapBforA(uint256)\":{\"params\":{\"amountBIn\":\"The amount of TokenB to exchange.\"}}},\"title\":\"SimpleDEX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Allows owner to add liquidity to the pool.\"},\"constructor\":{\"notice\":\"Initializes the contract with token addresses and sets the owner.\"},\"getPriceA()\":{\"notice\":\"Retrieves the current price of TokenA in terms of TokenB.\"},\"getPriceB()\":{\"notice\":\"Retrieves the current price of TokenB in terms of TokenA.\"},\"getReserves()\":{\"notice\":\"Retrieves the current reserves of TokenA and TokenB in the liquidity pool.\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"Allows owner to remove liquidity from the pool.\"},\"swapAforB(uint256)\":{\"notice\":\"Allows users to swap TokenA for TokenB.\"},\"swapBforA(uint256)\":{\"notice\":\"Allows users to swap TokenB for TokenA.\"}},\"notice\":\"A smart contract that serves as a decentralized exchange for educational purposes.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SimpleDEX\\n * @notice A smart contract that serves as a decentralized exchange for educational purposes.\\n * @dev This contract allows users to:\\n * - Add liquidity to the pool\\n * - Remove liquidity from the pool\\n * - Swap between TokenA and TokenB\\n * - Retrieve prices and reserves\\n * @author Marco Godoy (Eth Kipu comisi\\u00f3n 3)\\n */\\ncontract SimpleDEX {\\n    // State Variables\\n    address public tokenA;\\n    address public tokenB;\\n    address public owner;\\n    address public contractAddress;\\n    uint256 public liquidityTokenA;\\n    uint256 public liquidityTokenB;\\n\\n    // Event Emitters\\n    event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB);\\n    event TokenSwapped(address indexed trader, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event LiquidityRemoved(address indexed provider, uint256 amountA, uint256 amountB);\\n\\n    // Constructor\\n    /**\\n     * @notice Initializes the contract with token addresses and sets the owner.\\n     * @param _tokenA Address of TokenA.\\n     * @param _tokenB Address of TokenB.\\n     */\\n    constructor(address _tokenA, address _tokenB) {\\n        tokenA = _tokenA;\\n        tokenB = _tokenB;\\n        owner = msg.sender;\\n        contractAddress = address(this);\\n    }\\n\\n    // Modifier\\n    /**\\n     * @dev Restricts access to the contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Denied, must be owner\\\");\\n        _;\\n    }\\n\\n    // Functions\\n\\n    /**\\n     * @notice Allows owner to add liquidity to the pool.\\n     * @param amountA The amount of TokenA to deposit.\\n     * @param amountB The amount of TokenB to deposit.\\n     */\\n    function addLiquidity(uint256 amountA, uint256 amountB) onlyOwner external {\\n        require(amountA > 0 && amountB > 0, \\\"Amount of each token must be greater than 0\\\");\\n        \\n        liquidityTokenA += amountA;\\n        liquidityTokenB += amountB;\\n\\n        IERC20(tokenA).transferFrom(msg.sender, contractAddress, amountA);\\n        IERC20(tokenB).transferFrom(msg.sender, contractAddress, amountB);\\n\\n        emit LiquidityAdded(msg.sender, amountA, amountB);\\n    }\\n\\n    /**\\n     * @notice Allows users to swap TokenA for TokenB.\\n     * @param amountAIn The amount of TokenA to exchange.\\n     */\\n    function swapAforB(uint256 amountAIn) external {\\n        require(amountAIn > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 amountToGive = liquidityTokenB - (liquidityTokenA * liquidityTokenB) / (liquidityTokenA + amountAIn);\\n\\n        require(amountToGive > 0, \\\"Not enough token in liquidity\\\");\\n\\n        liquidityTokenA += amountAIn;\\n        liquidityTokenB -= amountToGive;\\n\\n        IERC20(tokenA).transferFrom(msg.sender, contractAddress, amountAIn);\\n        IERC20(tokenB).transfer(msg.sender, amountToGive);\\n\\n        emit TokenSwapped(msg.sender, tokenA, amountAIn, tokenB, amountToGive);\\n    }\\n\\n    /**\\n     * @notice Allows users to swap TokenB for TokenA.\\n     * @param amountBIn The amount of TokenB to exchange.\\n     */\\n    function swapBforA(uint256 amountBIn) external {\\n        require(amountBIn > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 amountToGive = liquidityTokenA - (liquidityTokenA * liquidityTokenB) / (liquidityTokenB + amountBIn);\\n\\n        require(amountToGive > 0, \\\"Not enough token in liquidity\\\");\\n\\n        liquidityTokenA -= amountToGive;\\n        liquidityTokenB += amountBIn;\\n\\n        IERC20(tokenB).transferFrom(msg.sender, contractAddress, amountBIn);\\n        IERC20(tokenA).transfer(msg.sender, amountToGive);\\n\\n        emit TokenSwapped(msg.sender, tokenB, amountBIn, tokenA, amountToGive);\\n    }\\n\\n    /**\\n     * @notice Allows owner to remove liquidity from the pool.\\n     * @param amountA The amount of TokenA to withdraw.\\n     * @param amountB The amount of TokenB to withdraw.\\n     */\\n    function removeLiquidity(uint256 amountA, uint256 amountB) onlyOwner external {\\n        require(amountA <= liquidityTokenA, \\\"Insufficient reserves in tokenA\\\");\\n        require(amountB <= liquidityTokenB, \\\"Insufficient reserves in tokenB\\\");\\n        \\n        liquidityTokenA -= amountA;\\n        liquidityTokenB -= amountB;\\n\\n        IERC20(tokenA).transfer(msg.sender, amountA);\\n        IERC20(tokenB).transfer(msg.sender, amountB);\\n\\n        emit LiquidityRemoved(msg.sender, amountA, amountB);\\n    }\\n\\n    /**\\n     * @notice Retrieves the current price of TokenA in terms of TokenB.\\n     * @return The price of TokenA.\\n     */\\n    function getPriceA() external view returns (uint256) {\\n        return (liquidityTokenA * 1e18) / liquidityTokenB;\\n    }\\n\\n    /**\\n     * @notice Retrieves the current price of TokenB in terms of TokenA.\\n     * @return price of TokenB.\\n     */\\n    function getPriceB() external view returns (uint256) {\\n        return (liquidityTokenB * 1e18) / liquidityTokenA;\\n    }\\n\\n    /**\\n     * @notice Retrieves the current reserves of TokenA and TokenB in the liquidity pool.\\n     * @return reserveA The amount of TokenA in the pool.\\n     * @return reserveB The amount of TokenB in the pool.\\n     */\\n    function getReserves() external view returns (uint256 reserveA, uint256 reserveB) {\\n        return (liquidityTokenA, liquidityTokenB);\\n    }\\n}\\n\",\"keccak256\":\"0x29e0d3dbe1c61fdcbf7dd603ac35ec470b4c28203301e936ea8442337eaa5408\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d51380380610d5183398101604081905261002f91610096565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316918116919091179091556002805482163317905560038054909116301790556100c9565b80516001600160a01b038116811461009157600080fd5b919050565b600080604083850312156100a957600080fd5b6100b28361007a565b91506100c06020840161007a565b90509250929050565b610c79806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063aa0f915b11610066578063aa0f915b1461019f578063bd52b0bc146101a7578063e4f1f70a146101b0578063f6b4dfb4146101c357600080fd5b80638da5cb5b146101665780639cd441da146101795780639d7de6b31461018c57600080fd5b80630902f1ac146100d45780630fc63d10146100f457806317ab77511461011f5780634218128a146101365780635f64b55b1461013e5780638014a7aa14610151575b600080fd5b600454600554604080519283526020830191909152015b60405180910390f35b600054610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100eb565b61012860045481565b6040519081526020016100eb565b6101286101d6565b600154610107906001600160a01b031681565b61016461015f366004610b40565b610200565b005b600254610107906001600160a01b031681565b610164610187366004610b59565b610462565b61016461019a366004610b59565b610686565b6101286108d0565b61012860055481565b6101646101be366004610b40565b6108eb565b600354610107906001600160a01b031681565b6000600554600454670de0b6b3a76400006101f19190610b91565b6101fb9190610bae565b905090565b600081116102555760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b6000816005546102659190610bd0565b6005546004546102759190610b91565b61027f9190610bae565b60045461028c9190610be3565b9050600081116102de5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e20696e206c6971756964697479000000604482015260640161024c565b80600460008282546102f09190610be3565b9250508190555081600560008282546103099190610bd0565b90915550506001546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610347923392909116908790600401610bf6565b6020604051808303816000875af1158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610c1a565b5060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610c1a565b50600154600054604080516001600160a01b0393841681526020810186905292909116908201526060810182905233907fb4f5edbb087700c3f3246c0f164b5277ac48e3720a148d371f9dfed3258662f2906080015b60405180910390a25050565b6002546001600160a01b031633146104b45760405162461bcd60e51b81526020600482015260156024820152742232b734b2b2161036bab9ba1031329037bbb732b960591b604482015260640161024c565b6000821180156104c45750600081115b6105245760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e74206f66206561636820746f6b656e206d7573742062652067726560448201526a061746572207468616e20360ac1b606482015260840161024c565b81600460008282546105369190610bd0565b92505081905550806005600082825461054f9190610bd0565b90915550506000546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261058d923392909116908790600401610bf6565b6020604051808303816000875af11580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190610c1a565b506001546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261060a923392909116908690600401610bf6565b6020604051808303816000875af1158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610c1a565b50604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee459101610456565b6002546001600160a01b031633146106d85760405162461bcd60e51b81526020600482015260156024820152742232b734b2b2161036bab9ba1031329037bbb732b960591b604482015260640161024c565b60045482111561072a5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420726573657276657320696e20746f6b656e4100604482015260640161024c565b60055481111561077c5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420726573657276657320696e20746f6b656e4200604482015260640161024c565b816004600082825461078e9190610be3565b9250508190555080600560008282546107a79190610be3565b909155505060005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190610c1a565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190610c1a565b50604080518381526020810183905233917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd0599101610456565b6000600454600554670de0b6b3a76400006101f19190610b91565b6000811161093b5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161024c565b60008160045461094b9190610bd0565b60055460045461095b9190610b91565b6109659190610bae565b6005546109729190610be3565b9050600081116109c45760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e20696e206c6971756964697479000000604482015260640161024c565b81600460008282546109d69190610bd0565b9250508190555080600560008282546109ef9190610be3565b90915550506000546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610a2d923392909116908790600401610bf6565b6020604051808303816000875af1158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a709190610c1a565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190610c1a565b50600054600154604080516001600160a01b0393841681526020810186905292909116908201526060810182905233907fb4f5edbb087700c3f3246c0f164b5277ac48e3720a148d371f9dfed3258662f290608001610456565b600060208284031215610b5257600080fd5b5035919050565b60008060408385031215610b6c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ba857610ba8610b7b565b92915050565b600082610bcb57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610ba857610ba8610b7b565b81810381811115610ba857610ba8610b7b565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610c2c57600080fd5b81518015158114610c3c57600080fd5b939250505056fea2646970667358221220654d7a24de2cb75b1116a2317908fd88b49610cfe92387a4fb4e4873eac7998b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063aa0f915b11610066578063aa0f915b1461019f578063bd52b0bc146101a7578063e4f1f70a146101b0578063f6b4dfb4146101c357600080fd5b80638da5cb5b146101665780639cd441da146101795780639d7de6b31461018c57600080fd5b80630902f1ac146100d45780630fc63d10146100f457806317ab77511461011f5780634218128a146101365780635f64b55b1461013e5780638014a7aa14610151575b600080fd5b600454600554604080519283526020830191909152015b60405180910390f35b600054610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100eb565b61012860045481565b6040519081526020016100eb565b6101286101d6565b600154610107906001600160a01b031681565b61016461015f366004610b40565b610200565b005b600254610107906001600160a01b031681565b610164610187366004610b59565b610462565b61016461019a366004610b59565b610686565b6101286108d0565b61012860055481565b6101646101be366004610b40565b6108eb565b600354610107906001600160a01b031681565b6000600554600454670de0b6b3a76400006101f19190610b91565b6101fb9190610bae565b905090565b600081116102555760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b6000816005546102659190610bd0565b6005546004546102759190610b91565b61027f9190610bae565b60045461028c9190610be3565b9050600081116102de5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e20696e206c6971756964697479000000604482015260640161024c565b80600460008282546102f09190610be3565b9250508190555081600560008282546103099190610bd0565b90915550506001546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610347923392909116908790600401610bf6565b6020604051808303816000875af1158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610c1a565b5060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610c1a565b50600154600054604080516001600160a01b0393841681526020810186905292909116908201526060810182905233907fb4f5edbb087700c3f3246c0f164b5277ac48e3720a148d371f9dfed3258662f2906080015b60405180910390a25050565b6002546001600160a01b031633146104b45760405162461bcd60e51b81526020600482015260156024820152742232b734b2b2161036bab9ba1031329037bbb732b960591b604482015260640161024c565b6000821180156104c45750600081115b6105245760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e74206f66206561636820746f6b656e206d7573742062652067726560448201526a061746572207468616e20360ac1b606482015260840161024c565b81600460008282546105369190610bd0565b92505081905550806005600082825461054f9190610bd0565b90915550506000546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261058d923392909116908790600401610bf6565b6020604051808303816000875af11580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190610c1a565b506001546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261060a923392909116908690600401610bf6565b6020604051808303816000875af1158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610c1a565b50604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee459101610456565b6002546001600160a01b031633146106d85760405162461bcd60e51b81526020600482015260156024820152742232b734b2b2161036bab9ba1031329037bbb732b960591b604482015260640161024c565b60045482111561072a5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420726573657276657320696e20746f6b656e4100604482015260640161024c565b60055481111561077c5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420726573657276657320696e20746f6b656e4200604482015260640161024c565b816004600082825461078e9190610be3565b9250508190555080600560008282546107a79190610be3565b909155505060005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190610c1a565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190610c1a565b50604080518381526020810183905233917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd0599101610456565b6000600454600554670de0b6b3a76400006101f19190610b91565b6000811161093b5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161024c565b60008160045461094b9190610bd0565b60055460045461095b9190610b91565b6109659190610bae565b6005546109729190610be3565b9050600081116109c45760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e20696e206c6971756964697479000000604482015260640161024c565b81600460008282546109d69190610bd0565b9250508190555080600560008282546109ef9190610be3565b90915550506000546003546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92610a2d923392909116908790600401610bf6565b6020604051808303816000875af1158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a709190610c1a565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190610c1a565b50600054600154604080516001600160a01b0393841681526020810186905292909116908201526060810182905233907fb4f5edbb087700c3f3246c0f164b5277ac48e3720a148d371f9dfed3258662f290608001610456565b600060208284031215610b5257600080fd5b5035919050565b60008060408385031215610b6c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ba857610ba8610b7b565b92915050565b600082610bcb57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610ba857610ba8610b7b565b81810381811115610ba857610ba8610b7b565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610c2c57600080fd5b81518015158114610c3c57600080fd5b939250505056fea2646970667358221220654d7a24de2cb75b1116a2317908fd88b49610cfe92387a4fb4e4873eac7998b64736f6c63430008140033",
  "devdoc": {
    "author": "Marco Godoy (Eth Kipu comisión 3)",
    "details": "This contract allows users to: - Add liquidity to the pool - Remove liquidity from the pool - Swap between TokenA and TokenB - Retrieve prices and reserves",
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "params": {
          "amountA": "The amount of TokenA to deposit.",
          "amountB": "The amount of TokenB to deposit."
        }
      },
      "constructor": {
        "params": {
          "_tokenA": "Address of TokenA.",
          "_tokenB": "Address of TokenB."
        }
      },
      "getPriceA()": {
        "returns": {
          "_0": "The price of TokenA."
        }
      },
      "getPriceB()": {
        "returns": {
          "_0": "price of TokenB."
        }
      },
      "getReserves()": {
        "returns": {
          "reserveA": "The amount of TokenA in the pool.",
          "reserveB": "The amount of TokenB in the pool."
        }
      },
      "removeLiquidity(uint256,uint256)": {
        "params": {
          "amountA": "The amount of TokenA to withdraw.",
          "amountB": "The amount of TokenB to withdraw."
        }
      },
      "swapAforB(uint256)": {
        "params": {
          "amountAIn": "The amount of TokenA to exchange."
        }
      },
      "swapBforA(uint256)": {
        "params": {
          "amountBIn": "The amount of TokenB to exchange."
        }
      }
    },
    "title": "SimpleDEX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Allows owner to add liquidity to the pool."
      },
      "constructor": {
        "notice": "Initializes the contract with token addresses and sets the owner."
      },
      "getPriceA()": {
        "notice": "Retrieves the current price of TokenA in terms of TokenB."
      },
      "getPriceB()": {
        "notice": "Retrieves the current price of TokenB in terms of TokenA."
      },
      "getReserves()": {
        "notice": "Retrieves the current reserves of TokenA and TokenB in the liquidity pool."
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "Allows owner to remove liquidity from the pool."
      },
      "swapAforB(uint256)": {
        "notice": "Allows users to swap TokenA for TokenB."
      },
      "swapBforA(uint256)": {
        "notice": "Allows users to swap TokenB for TokenA."
      }
    },
    "notice": "A smart contract that serves as a decentralized exchange for educational purposes.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 791,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 793,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 795,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 797,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "contractAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 799,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "liquidityTokenA",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 801,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "liquidityTokenB",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}